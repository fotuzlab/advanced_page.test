<?php

/**
 * @file
 * Tests for advanced_page module.
 */

class AdvancedPageTestCase extends DrupalWebTestCase {
  protected $advpg_user_nonodeperm;

  public static function getInfo() {
    return array(
      'name' => 'Advanced Page',
      'description' => 'Allow a site maintainer to provide editors a way to create and edit static pages on the site.',
      'group' => 'Advanced Page',
    );
  }

  /**
   * Enable modules and create users with specific permissions.
   */
  function setUp() {
    parent::setUp('advanced_page');
    // Create users.
    $this->advpg_user_nonodeperm = $this->drupalCreateUser(array('view advanced page list'));
    $this->advpg_user_nodeperm = $this->drupalCreateUser(array('view advanced page list', 'create advanced_page content', 'delete any advanced_page content', 'edit any advanced_page content'));
  }
  
  /**
   * Verify the logged in user has the desired access to the various advanced_page nodes.
   *
   * @param object $node_user
   *   The user who creates the node.
   * @param object $node
   *   A node object.
   * @param boolean $admin
   *   User has 'access administration pages' privilege.
   * @param integer $response
   *   HTTP response code.
   */
  private function verifyAdvancedPage($node_user, $node, $admin, $response = 200) {

    // View advanced page node.
    $this->drupalGet('node/' . $node->nid);
    $this->assertResponse(200);
    $this->assertTitle($node->title . ' | Drupal', t('Advanced page node was displayed'));

    // View advanced page edit node.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertResponse($response);
    if ($response == 200) {
      $this->assertTitle('Edit Advanced page ' . $node->title . ' | Drupal', t('Advanced edit node was displayed'));
    }

    if ($response == 200) {
      // Edit advanced page node.
      $edit = array();
      $edit["title"] = 'node/' . $node->nid;
      $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
      $this->assertRaw(t('Advanced page %title has been updated.', array('%title' => $edit["title"])), t('Advanced page node was edited'));

      // Delete advanced page node.
      $this->drupalPost('node/' . $node->nid . '/delete', array(), t('Delete'));
      $this->assertResponse($response);
      $this->assertRaw(t('Advanced page %title has been deleted.', array('%title' => $edit["title"])), t('Advanced page node was deleted'));
    }
  }

  function testAdvancedPage() {
    // Test user with no node create, delete and edit perm.
    $this->drupalLogin($this->advpg_user_nonodeperm);
    $node = $this->drupalCreateNode(array('type' => 'advanced_page'));
    $this->verifyAdvancedPage($this->advpg_user_nonodeperm, $node, FALSE, 403);
    // Test user with node create, delete and edit perm.
    $this->drupalLogin($this->advpg_user_nodeperm);
    $node = $this->drupalCreateNode(array('type' => 'advanced_page'));
    $this->verifyAdvancedPage($this->advpg_user_nodeperm, $node, TRUE, 200);
  }

}

